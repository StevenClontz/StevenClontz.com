#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.



# Add page descriptions
preprocess do
  items.each do |item|
    item[:description] ||= @config[:site_description]
    item[:title] ||= "Blank Title"
    item[:kind] ||= "page"
  end
  
  unless items.find { |i| i.identifier == '/_CNAME/' }
    items << Nanoc::Item.new( 'stevenclontz.com',
                              {}, #no attributes
                              '/_CNAME/' )
  end
end



# Static Files
compile '/_assets/*/' do
end

route '/_assets/*/' do
  '/' + item.identifier[2..-2] + '.' + item[:extension]
end


# Redirects
compile '/_redirects/*/' do
  layout 'redirect'
end

route '/_redirects/*/' do
  item.identifier[11..-1] + 'index.html'
end

# GitHub CNAME
compile '/_CNAME/' do
end #no compilation
route '/_CNAME/' do
  '/CNAME'
end


# Home Page
compile '/' do
  filter_by_extension
  layout 'jumbo'
  filter :relativize_paths, type: :html
end

# Website Pages
compile '*' do
  filter_by_extension
  if @item[:redirect_to]
    layout 'redirect'
  else
    layout 'default'
    filter :relativize_paths, type: :html
  end
end

# Blog Posts
route '/_posts/*/' do
  date = Date.parse item[:created_at]
  year = "%04d" % date.year
  month = "%02d" % date.month
  day = "%02d" % date.day
  slug = item.identifier.split('/')[-1][11..-1]
  "/blog/#{year}/#{month}/#{day}/#{slug}/index.html"
end

route '*' do
  # Write item with identifier /foo/ to /foo/index.html
  item.identifier + 'index.html'
end

# All layouts are haml
layout '*', :haml
